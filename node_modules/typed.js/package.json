{
  "name": "typed.js",
  "version": "1.1.4",
  "homepage": "https://github.com/mattboldt/typed.js",
  "authors": [
    "Matt Boldt <me@mattboldt.com>"
  ],
  "description": "A jQuery typing animation script",
  "main": "dist/typed.min.js",
  "keywords": [
    "typed",
    "animation"
  ],
  "devDependencies": {
    "gulp": "^3.8.10",
    "gulp-rename": "^1.2.0",
    "gulp-uglify": "^1.1.0"
  },
  "gitHead": "b13c0ae8d6c3ba5fdbbfc93cd72c69c1a0fec269",
  "readme": "Typed.js\r\n========\r\n\r\n[View the live demo](http://www.mattboldt.com/demos/typed-js/) | [Go to my site, mattboldt.com](http://www.mattboldt.com)\r\n\r\nTyped.js is a jQuery plugin that types. Enter in any string, and watch it type at the speed you've set, backspace what it's typed, and begin a new sentence for however many strings you've set.\r\n\r\nLooking for some custom use cases for Typed.js? [Check out the wiki](https://github.com/mattboldt/typed.js/wiki)\r\n\r\n---\r\n\r\nInstallation\r\n------------\r\nThis is really all you need to get going.\r\n\r\n~~~ javascript\r\n<script src=\"jquery.js\"></script>\r\n<script src=\"typed.js\"></script>\r\n<script>\r\n\t$(function(){\r\n\t\t$(\".element\").typed({\r\n\t\t\tstrings: [\"First sentence.\", \"Second sentence.\"],\r\n\t\t\ttypeSpeed: 0\r\n\t\t});\r\n\t});\r\n</script>\r\n...\r\n\r\n<span class=\"element\"></span>\r\n~~~\r\n\r\n### Install with Bower\r\n\r\n~~~\r\nbower install typed.js\r\n~~~\r\n\r\nWant the animated blinking cursor? Add this CSS.\r\n\r\n~~~ scss\r\n.typed-cursor{\r\n\topacity: 1;\r\n\t-webkit-animation: blink 0.7s infinite;\r\n\t-moz-animation: blink 0.7s infinite;\r\n\tanimation: blink 0.7s infinite;\r\n}\r\n@keyframes blink{\r\n\t0% { opacity:1; }\r\n\t50% { opacity:0; }\r\n\t100% { opacity:1; }\r\n}\r\n@-webkit-keyframes blink{\r\n\t0% { opacity:1; }\r\n\t50% { opacity:0; }\r\n\t100% { opacity:1; }\r\n}\r\n@-moz-keyframes blink{\r\n\t0% { opacity:1; }\r\n\t50% { opacity:0; }\r\n\t100% { opacity:1; }\r\n}\r\n~~~\r\n\r\nWonderful sites using Typed.js\r\n---\r\nhttps://slack.com/\r\n\r\nhttps://envato.com/\r\n\r\nhttps://productmap.co/\r\n\r\nhttps://www.typed.com/\r\n\r\nhttps://git.market/\r\n\r\nhttp://allison.house/404\r\n\r\nhttp://www.maxcdn.com/\r\n\r\nhttps://commando.io/\r\n\r\nhttp://testdouble.com/agency.html\r\n\r\nhttp://www.stephanemartinw.com/\r\n\r\nhttp://www.trelab.fi/en/\r\n\r\nhttp://jessejohnson.github.io/\r\n\r\n\r\n---\r\n\r\n### HTML tags\r\n\r\nBy default the content type is set to `html`, so you're good to go. Want to type out the html regularly? Set it to `text`.\r\n\r\n~~~ javascript\r\n$(\".element\").typed({\r\n\tstrings: [\"Typed.js is a <strong>jQuery</strong> plugin.\"],\r\n\tcontentType: 'html' // or 'text'\r\n});\r\n~~~\r\n\r\n### Strings from static HTML (SEO Friendly)\r\nRather than using the `strings` array to insert strings, you can place an HTML `div` on the page and read from it.\r\nThis allows bots and search engines, as well as users with JavaScript disabled, to see your text on the page.\r\n\r\n~~~ javascript\r\n<script>\r\n\t$(function(){\r\n\t\t$(\"#typed\").typed({\r\n\t\t\tstringsElement: $('#typed-strings')\r\n\t\t});\r\n\t});\r\n</script>\r\n~~~\r\nYou must wrap each string in the `typed-strings` div with a `<p>`\r\n~~~ html\r\n<div id=\"typed-strings\">\r\n    <p>Typed.js is a <strong>jQuery</strong> plugin.</p>\r\n    <p>It <em>types</em> out sentences.</p>\r\n</div>\r\n<span id=\"typed\"></span>\r\n~~~\r\n\r\n### Line Breaks\r\n\r\n#### `contentType: 'html'`\r\n\r\n~~~ javascript\r\n$(\".typed\").typed({ strings: [\"Sentence with <br>line break.\"] });\r\n~~~\r\n\r\n#### `contentType: 'text'`\r\n\r\nUse `white-space: pre` in your typed text element, and then `\\n` when typing out the strings. Example:\r\n\r\n~~~ html\r\n\r\n<span id=\"typed\" style=\"white-space:pre\"></span>\r\n\r\n...\r\n\r\n$(\".typed\").typed({ strings: [\"Sentence with a\\nline break.\"] });\r\n\r\n~~~\r\n\r\n### Type Pausing\r\n\r\nYou can pause in the middle of a string for a given amount of time by including an escape character.\r\n\r\n~~~ javascript\r\n<script>\r\n\t$(function(){\r\n\t\t$(\".element\").typed({\r\n\t\t\t// Waits 1000ms after typing \"First\"\r\n\t\t\tstrings: [\"First ^1000 sentence.\", \"Second sentence.\"]\r\n\t\t});\r\n\t});\r\n</script>\r\n~~~\r\n\r\n\r\nCustomization\r\n----\r\n\r\n~~~ javascript\r\n<script>\r\n\t$(function(){\r\n\t\t$(\".element\").typed({\r\n\t\t\tstrings: [\"First sentence.\", \"Second sentence.\"],\r\n\t\t\t// Optionally use an HTML element to grab strings from (must wrap each string in a <p>)\r\n\t\t\tstringsElement: null,\r\n\t\t\t// typing speed\r\n\t\t\ttypeSpeed: 0,\r\n\t\t\t// time before typing starts\r\n\t\t\tstartDelay: 0,\r\n\t\t\t// backspacing speed\r\n\t\t\tbackSpeed: 0,\r\n\t\t\t// shuffle the strings\r\n +        \t\tshuffle: false,\r\n\t\t\t// time before backspacing\r\n\t\t\tbackDelay: 500,\r\n\t\t\t// loop\r\n\t\t\tloop: false,\r\n\t\t\t// false = infinite\r\n\t\t\tloopCount: false,\r\n\t\t\t// show cursor\r\n\t\t\tshowCursor: true,\r\n\t\t\t// character for cursor\r\n\t\t\tcursorChar: \"|\",\r\n\t\t\t// attribute to type (null == text)\r\n\t\t\tattr: null,\r\n\t\t\t// either html or text\r\n\t\t\tcontentType: 'html',\r\n\t\t\t// call when done callback function\r\n\t\t\tcallback: function() {},\r\n\t\t\t// starting callback function before each string\r\n\t\t\tpreStringTyped: function() {},\r\n\t\t\t//callback for every typed string\r\n\t\t\tonStringTyped: function() {},\r\n\t\t\t// callback for reset\r\n\t\t\tresetCallback: function() {}\r\n\t\t});\r\n\t});\r\n</script>\r\n~~~\r\n\r\n\r\n### Get Super Custom\r\n\r\nWant to get really custom? On my site and in the Typed.js demo I have the code type out two words, and then backspace only those two, then continue where it left off. This is done in an `if` statement in the `backspace()` function. Here's what it looks like.\r\n\r\n~~~ javascript\r\n...\r\n, backspace: function(curString, curStrPos){\r\n\t...\r\n\r\n\tsetTimeout(function() {\r\n\r\n\t\t\t// check string array position\r\n\t\t\t// on the first string, only delete one word\r\n\t\t\t// the stopNum actually represents the amount of chars to\r\n\t\t\t// keep in the current string. In my case it's 3.\r\n\t\t\tif (self.arrayPos == 1){\r\n\t\t\t\tself.stopNum = 3;\r\n\t\t\t}\r\n\t\t\t//every other time, delete the whole typed string\r\n\t\t\telse{\r\n\t\t\t\tself.stopNum = 0;\r\n\t\t\t}\r\n...\r\n~~~\r\n\r\nThis checks if the `arrayPos` is `1`, which would be the second string you entered. If so, it sets `stopNum` to `3` instead of `0`, which tells it to stop when there are 3 characters left. For now you'll have to create custom `if` statements for each specific case you want. I may automate this somehow in the future.\r\n\r\n\r\n## Development\r\n\r\n`npm install`\r\n\r\nThen, once you've made your edits:\r\n\r\n`gulp`\r\n\r\nThis will create a minified version in `/dist`\r\n\r\n\r\nend\r\n---\r\n\r\nThanks for checking this out. If you have any questions, I'll be on [Twitter](http://www.twitter.com/atmattb).\r\n\r\nIf you're using this, let me know! I'd love to see it.\r\n\r\nIt would also be great if you mentioned me or my website somewhere. [www.mattboldt.com](http://www.mattboldt.com)\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "typed.js@1.1.4",
  "_shasum": "04bc18057850d2eda8bf488e217bf3eb1be1de7a",
  "_from": "mattboldt/typed.js",
  "_resolved": "git://github.com/mattboldt/typed.js.git#b13c0ae8d6c3ba5fdbbfc93cd72c69c1a0fec269"
}
